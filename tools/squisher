#!/bin/sh
#
# Squish a CM otapackage for distribution
# cyanogen
#

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5=md5
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo "ERROR: $0 only works with a full build environment. $OUT should exist."
	exit 1
fi

if [ "$TARGET_BUILD_TYPE" = "debug" ]; then
    OTAPACKAGE=$OUT/${TARGET_PRODUCT}_debug-ota-$TARGET_BUILD_VARIANT.$USER.zip
elif [ "$TARGET_BUILD_VARIANT" = "userdebug" ]; then
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-eng.$USER.zip
else
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-$TARGET_BUILD_VARIANT.$USER.zip
fi
if [ ! -f "$OTAPACKAGE" ]; then
	echo "$OTAPACKAGE doesn't exist!";
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/cm/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"
DELETE_APKS="Apollo.apk Email.apk Exchange.apk Galaxy4.apk Gallery2.apk MagicSmokeWallpapers.apk Mms.apk Trebuchet.apk 
VideoEditor.apk CMWallpapers.apk LiveWallpapers.apk VoiceDialer.apk SoundRecorder.apk VisualizationWallpapers.apk "
DELETE_FONTS="DroidNaskh-Regular.ttf DroidSansFallback.ttf DroidSansEthiopic-Regular.ttf Lohit-Bengali.ttf Lohit-Devanagari.ttf 
Lohit-Tamil.ttf "

REPACK=$OUT/repack.d
printf "Sanitizing environment..."
rm -rf $REPACK
mkdir -p $REPACK
echo


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
printf "Unpacking $OTAPACKAGE..."
unzip $QUIET $OTAPACKAGE
echo
cd $REPACK/ota/system/framework
$OPTICHARGER framework-res.apk
cd $REPACK/ota/system/app
find ./ -name \*.apk | $XARGS $OPTICHARGER
)

# Fix build.prop
$SED -i \
	-e '/ro\.kernel\.android\.checkjni/d' \
	-e '/ro\.build\.type/s/eng/user/' \
	$REPACK/ota/system/build.prop


# Delete unnecessary binaries
( cd $REPACK/ota/system/bin; echo $DELETE_BINS | xargs rm -f; )

# Delete unnecessary Apk
( cd $REPACK/ota/system/app; echo $DELETE_APKS | xargs rm -f; )

#remove the stupid old file
rm $REPACK/ota/system/app/WynnMDMService.apk.old

# Delete unnecessary Fonts
( cd $REPACK/ota/system/fonts; echo $DELETE_FONTS | xargs rm -f; )

#Copy droidfallback
cp $ANDROID_BUILD_TOP/vendor/cm/prebuilt/common/fonts/DroidSansFallback.ttf $REPACK/ota/system/fonts/DroidSansFallback.ttf

#remove cm bootanimation and replace with slim
rm -rf $REPACK/ota/system/media/bootanimation.zip
cp $ANDROID_BUILD_TOP/vendor/cm/prebuilt/common/media/bootanimation.zip $REPACK/ota/system/media/bootanimation.zip

# No need for media/audio
rm -rf $REPACK/ota/system/media/audio

#re create folders for audio
mkdir -p $REPACK/ota/system/media/audio
mkdir -p $REPACK/ota/system/media/audio/alarms
mkdir -p $REPACK/ota/system/media/audio/notifications
mkdir -p $REPACK/ota/system/media/audio/ringtones
mkdir -p $REPACK/ota/system/media/audio/ui

#copy new audio files
cp -rf $ANDROID_BUILD_TOP/vendor/cm/prebuilt/common/media/audio/alarms/* $REPACK/ota/system/media/audio/alarms/
cp -rf $ANDROID_BUILD_TOP/vendor/cm/prebuilt/common/media/audio/notifications/* $REPACK/ota/system/media/audio/notifications/
cp -rf $ANDROID_BUILD_TOP/vendor/cm/prebuilt/common/media/audio/ringtones/* $REPACK/ota/system/media/audio/ringtones/
cp -rf $ANDROID_BUILD_TOP/vendor/cm/prebuilt/common/media/audio/ui/* $REPACK/ota/system/media/audio/ui/

# No need for media/video
rm -rf $REPACK/ota/system/media/video
rm $REPACK/ota/system/media/LMprec_508.emd
rm $REPACK/ota/system/media/PFFprec_600.emd

# No need for tts
rm -rf $REPACK/ota/system/tts

# No need for srec
rm -rf $REPACK/ota/system/usr/srec

# No need for recovery
rm -rf $REPACK/ota/recovery

# Strip modules
[ -d $REPACK/ota/system/lib/modules ] && \
	find $REPACK/ota/system/lib/modules -name "*.ko" -print0 | xargs -0 arm-eabi-strip --strip-unneeded

# Determine what to name the new signed package
MODVERSION=`sed -n -e'/ro\.cm\.version/s/^.*=//p' $REPACK/ota/system/build.prop`
OUTFILE=$OUT/slim-$MODVERSION.zip
echo MODVERSION: $MODVERSION

# Pack it up and sign
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )
echo
printf "Signing package..."
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
	-jar $ANDROID_BUILD_TOP/out/host/$OUT_TARGET_HOST/framework/signapk.jar \
	-w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
	$REPACK/update.zip $OUTFILE
echo
printf "Cleaning up..."
rm -rf $REPACK
echo

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5sum
echo
echo "Package complete: $OUTFILE"
cat $img.md5sum
echo
)

exit 0
